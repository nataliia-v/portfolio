/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: CR4YCR4Y (https://sketchfab.com/CR4YCR4Y)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/programmer-cr4y-d64e933c6ea04cb6887007223dadf9b9
Title: Programmer CR4Y
*/

import { useRef, useEffect } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame, useThree } from '@react-three/fiber';
import { a } from '@react-spring/three';

import programmerScene from '../assets/3d/programmer_cr4y.glb';

const Programmer = ({ isRotating, setIsRotating, setCurrentStage, ...props }) => {
  const progremmerRef = useRef();

  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(programmerScene);

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95; // damping factor to control rotation damping

  const handlePointerDown = e => {
    /* 
    mouse click is only going to do what it does in this function
    and it won't touch any other elements or functions on the screen. 
    */
    e.stopPropagation();
    e.preventDefault(); // reload the page
    setIsRotating(true);

    // figure out if it's a touched event on a phone or a mouse event
    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    // Store the current clientX position for reference
    lastX.current = clientX;
  };

  const handlePointerUp = e => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  };

  const handlePointerMove = e => {
    e.stopPropagation();
    e.preventDefault();

    if (isRotating) {
      // If rotation is enabled, calculate the change in clientX position
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;

      // calculate the change in the horizontal position of the mouse cursor or touch input
      const delta = (clientX - lastX.current) / viewport.width;

      progremmerRef.current.rotation.y += delta * 0.01 * Math.PI; //  Math.PI because working in a circle
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  const handleKeyDown = e => {
    if (e.key === 'ArrowLeft') {
      if (!isRotating) setIsRotating(true);
      progremmerRef.current.rotation.y += 0.01 * Math.PI; // Math.PI it is a circle
    } else if (e.key === 'ArrowRight') {
      if (!isRotating) setIsRotating(true);
      progremmerRef.current.rotation.y -= 0.01 * Math.PI; // Math.PI it is a circle
    }
  };

  const handleKeyUp = e => {
    if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
      setIsRotating(false);
    }
  };

  useFrame(() => {
    // If not rotating, apply damping to slow down the rotation (smoothly)
    if (!isRotating) {
      // Apply damping factor
      rotationSpeed.current *= dampingFactor;

      // Stop rotation when speed is very small
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      progremmerRef.current.rotation.y += rotationSpeed.current;
    } else {
      const rotation = progremmerRef.current.rotation.y;

      /**
       * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
       * The goal is to ensure that the rotation value remains within a specific range to
       * prevent potential issues with very large or negative rotation values.
       *  Here's a step-by-step explanation of what this code does:
       *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
       *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
       *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
       *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
       *     This is done to ensure that the value remains positive and within the range of
       *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
       *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
       *     modulo operation to the value obtained in step 2. This step guarantees that the value
       *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
       *     circle in radians.
       */
      const normalizedRotation = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the scene orientation
      switch (true) {
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(1);
          break;
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(4);
          break;
        default:
          setCurrentStage(null);
      }
    }
  }); // function is going to happen on every single frame

  useEffect(() => {
    const canvas = gl.domElement; // we're touching the canvas
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointermove', handlePointerMove);
    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('keyup', handleKeyUp);

    return () => {
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('pointermove', handlePointerMove);
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('keyup', handleKeyUp);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

  return (
    <a.group ref={progremmerRef} {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, Math.PI]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh geometry={nodes.Object_4.geometry} material={materials.Crayfish_Eye} />
          <mesh geometry={nodes.Object_5.geometry} material={materials.Crayfish_Flesh} />
          <mesh geometry={nodes.Object_6.geometry} material={materials.Crayfish_Shell} />
          <mesh geometry={nodes.Object_7.geometry} material={materials.Sock_Blue} />
          <mesh geometry={nodes.Object_8.geometry} material={materials.Sock_Pink} />
          <mesh geometry={nodes.Object_9.geometry} material={materials.Sock_White} />
          <mesh geometry={nodes.Object_11.geometry} material={materials.Keyboard_Glow_Blue} />
          <mesh geometry={nodes.Object_12.geometry} material={materials.Keyboard_Glow_Pink} />
          <mesh geometry={nodes.Object_13.geometry} material={materials.Keyboard_Glow_White} />
          <mesh geometry={nodes.Object_14.geometry} material={materials.L4PT0P_auv} />
          <mesh geometry={nodes.Object_15.geometry} material={materials.Laptop_Gloss_Black} />
          <mesh geometry={nodes.Object_16.geometry} material={materials.Laptop_Grey} />
          <mesh geometry={nodes.Object_17.geometry} material={materials.Laptop_Shell} />
        </group>
      </group>
    </a.group>
  );
};

useGLTF.preload('/programmer_cr4y.glb');

export default Programmer;
